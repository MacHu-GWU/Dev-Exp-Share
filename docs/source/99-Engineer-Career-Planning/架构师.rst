1. 码农分为真的能写代码的, 以及自认为能写代码的.
2. 真的能写代码的码农又分为自认为写的不错的, 以及真的还不错的.
3. 真的能写不错代码的码农又分为会钻研会不断优化的, 以及安于现状的.
4. 会钻研的码农又分为喜欢广度了解新技术蜻蜓点水的, 以及深入钻研用到知识的. 了解广度的码农又有少部分愿意深入某些技术, 喜欢深入研究的又往往缺乏广度知识.
5. 极少深度广度都关注的码农又分为为技术而技术和为业务而技术的. 纯为技术而技术的码农在国内的软件行业需求太少, 且需求的往往不是应用软件领域了.
6. 为业务而技术的深度广度都了解的码农, 又需要有良好的沟通能力.
7. 而沟通好的, 又有一部分当PM去了.
8. 然后剩下的, 又有一部分慢慢脱离实际开发（不再做任何实现）或者开始依靠拿各种中间件搭积木来作为 "架构" 手段.
9. 除去这些, 剩下对业务有一定了解, 对技术广度上有多种涉猎, 深度上对部分技术研究彻底, 还有很重要的一点, 考虑问题足够细致全面.
10. 细致全面善于沟通, 技术上深度广度都没问题,  又喜欢这个工作, 还会不时做底层实现, 从业务和开发两个角度出发, 搭出 "架构" 来是为了开发效率, 为了运行效率, 为了开发质量, 为了业务灵活和运行稳定, 为了维护方便等等这样的人, 个人认为可以称为 "架构师".

而真能满足这种需求的, 别说题主的 10% 的比例, 1% 能不能达到我也持怀疑态度. 其实现在的 "架构师" 大多数都停留在8这个层次, 甚至很多在5这个层次就当上title上的架构师了.

总之, 成为架构师, 不仅仅是工作上的简单积累, 更需要主动接纳工作外的大量知识, 同时, 对性格上对于非技术能力上也有一定的要求, 不仅如此连思维方式都很重要, 外加职业发展中又有很多岔路, 最后走到架构师这根树枝上的就寥寥可数了.

- 深度广度兼顾很难.
- 依赖 Service, middleware, 而失去了一线开发, 底层实现的能力.
- 同时考虑业务和开发两个角度
- 有能力同时兼顾 开发效率, 运行效率, 开发质量, 业务灵活, 运行稳定, 维护方便.