.. _consistent-hash-algorithm:

Consistent Hash 一致性哈希算法
==============================================================================

**背景**

主流的负载均衡算法的功能主要是 "将流量均匀地或是按照算力加权依概率分配到 N 个负载上", 而在实现上通常是对流量进行 hash, 然后使用负载均衡算法函数将 hash 结果映射到 N 个负载的序号上.

一致性哈希算法在分布式系统中应用广泛, 凡是可以通过添加机器扩容的系统大部分采用了 ``一致性哈希算法`` 进行负载均衡.

该算法主要解决了 Highly Availability 中的负载均衡问题.

**传统哈希算法**

传统的负载均衡哈希算法为, 对 hash(id) 求 mod(N) = x, N 为分布式节点数. 然后将负载放到第 x + 1 个节点上进行运算 (因为节点的编号从 1 开始, 而 x 的取值是从 0 开始的, 所以要用 x + 1).

**一致性哈希算法**

取一个 0 ~ 2 ^ 32 - 1 的整数环 M, 环上的数 12 点钟方向为 0, 数字沿着顺时针递增. 对 hash(id) 求 mod(2 ^ 32) = x. 将 M 平均划分为 N 段, N 为分布式节点数. 第 i 段的终点为 i * 2 ^ 32 / N. 对于负载 x 沿着顺时针方向寻找最近的一个终点, 该终点是第 i 段, 那么负载就放到第 i 个机器上进行.

**常见问题**:

- Q: 传统哈希算法有什么问题?
- A: 假设我们有 3 个节点 (N = 3), 映射规律为 3k + 0 -> n1, 3k + 1 -> n2, 3k + 2 -> n3, (3k+0,1,2, 为 hash(id)的结果). 如果我们增加一个节点, 新的映射规律为 4k + 0 -> n1, 4k + 1 -> n2, 4k + 2 -> n3, 4k + 3 -> n4, 那么根据概率, 有 75% (3/4) 的负载需要移动到新的节点上处理. 数学上我们可以证明, 从 N 扩容到 N+1, 需要有 N/(N+1) 的负载需要改变新的节点.

- Q: 一致性哈希算法在扩容的场景下, 需要做什么?
- A: 在一致性哈希算法中, 我们扩容的时候仅仅是将第 N 段一分为二从中间断开, 并增加一个新的终点作为新节点的终点. 那么只有 1 / 2N 的负载需要改变新的节点, 当 N = 3 时是 16.6%, 比之前的 75% 有巨大改善.

- Q: 在上面的描述中, 只有那个被一分为二的段所对应的节点的负载被分流了, 另外的节点的负载并没有降低, 如何解决?
- A: 引入虚拟节点, 可以视为是一致性哈希算法的改进版本, 一开始, 我们将环 M 平均划分为 N ^ 2 段, 在该例子中为 9 段, 连续的 9 段对应的环是依次变换的, 分别对应节点 N1, N2, N3, N1, N2, N3, N1, N2, N3. 在添加新的节点时, 找到 3 个不同节点所属的段对其一分为二. 这样能保证新加的节点从原本的 N 个小段中分别获得了一部分负载, 使得总体上的 N + 1 台机器负责的负载依然是相同的.
