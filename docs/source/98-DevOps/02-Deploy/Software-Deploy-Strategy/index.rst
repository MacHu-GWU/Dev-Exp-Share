Deploy Strategy 部署策略
==============================================================================

.. contents::
    :depth: 1
    :local:

Deployment Pattern (部署模式)
------------------------------------------------------------------------------

.. contents::
    :depth: 1
    :local:

+-----------------------+---------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------+--------------------------------------+----------------------------------------------------------------------+
| 部署策略              | 描述                                                                                                                            | 优势                                                         | 劣势                                 | 适用场景                                                             |
+-----------------------+---------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------+--------------------------------------+----------------------------------------------------------------------+
| Rolling upgrade       | 滚动部署, 每次发布时，先将老版本 V1 流量从 Load Balance 上摘除，然后清除老版本，发新版本 V2，再将 Load Balance 流量接入新版本。 | 用户体验影响小，体验较平滑, 相对蓝绿发布节省机器或者容器资源 | 发布和回退时间比较缓慢               | 适用于资源比较紧张，对速度没有太大要求，但是服务又不能中断的部署场景 |
+-----------------------+---------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------+--------------------------------------+----------------------------------------------------------------------+
| Blue/Green Deployment | 不能中断的业务场景                                                                                                              | 升级切换和回退速度非常快                                     | 需要两倍的资源                       | 机器资源有富余或者可以按需分配                                       |
+-----------------------+---------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------+--------------------------------------+----------------------------------------------------------------------+
| Canary Deployment     | 金丝雀发布, 先发布小流量作为验证                                                                                                | 出现问题影响的比例较小                                       | 这样的发布会耗费一定的时间           | 正式发布之前的验证                                                   |
+-----------------------+---------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------+--------------------------------------+----------------------------------------------------------------------+
| Reckless Deployment   | 先将老版本 V1 全部下掉，再将新版本发到机器上去。这种方式会引入服务中断                                                          | 简单成本低                                                   | 服务中断用户受影响，出了问题回滚也慢 | 测试环境或者一些不重要的服务                                         |
+-----------------------+---------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------+--------------------------------------+----------------------------------------------------------------------+


Big Bang Deployment (大爆炸部署)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

一下全部部署.

Blue/Green Deployment (蓝绿部署)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

概念
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Blue-green deployments are a pattern whereby we reduce downtime during production deployments by having two production environments ("blue" and "green").

蓝绿部署，也就是会同时存在两个版本，如果绿色版本激活后发现了问题，则将流量路由回到蓝色版本中。
蓝绿部署依赖流量路由。这可以通过更新主机的 DNS CNAMES 来完成, 也可以通过 HAProxy。

老版本通常会保留一定时间用作快速回滚。


Rolling update (滚动发布)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

概念
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Rolling deployments are a pattern whereby, instead of deploying a package to all servers at once, we slowly roll out the release by deploying it to each server one-by-one. In load balanced scenarios, this allows us to reduce overall downtime.

滚动部署，逐渐用新版本替换旧版本, 最大限度的降低相关风险，包括面向用户的停机时间。
在此期间，新旧版本会共存，而不会影响功能和用户体验。这个过程可以更轻易的回滚和旧组件不兼容的任何新组件。

每次发布时，先将老版本 V1 流量从 LB 上摘除，然后清除老版本，发新版本 V2，再将 LB 流量接入新版本。


Canary Deployment (金丝雀部署/灰度部署)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


概念
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Canary deployments are a pattern for rolling out releases to a subset of users or servers. The idea is to first deploy the change to a small subset of servers, test it, and then roll the change out to the rest of the servers. The canary deployment serves as an early warning indicator with less impact on downtime: if the canary deployment fails, the rest of the servers aren't impacted.

灰度发布是指在黑与白之间，能够平滑过渡的一种发布方式。AB test就是一种灰度发布方式，让一部分用户继续用A，一部分用户开始用B，如果用户对B没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到B上面来。灰度发布可以保证整体系统的稳定，在初始灰度的时候就可以发现、调整问题，以保证其影响度，而我们平常所说的金丝雀部署也就是灰度发布的一种方式。


其他发布方式
------------------------------------------------------------------------------

.. contents::
    :depth: 1
    :local:


Feature Toggle (功能开关)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

利用代码中的功能开关（Feature Flag/Toggle/Switch）来控制发布逻辑，一般不需要复杂的发布工具和智能 Load Balance 配合，是一种相对比较低成本和简单的发布方式。

优势是切换比较灵活可控，切换成本也比较低。**但是对代码有侵入，需要定期清理老的逻辑，代码维护成本大。适用于一些需要灰度新功能，或者针对部分用户开发的功能。**


A/B 测试
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

和功能开关很相似，但是通常会是两组或多组方案上线，对比。**通常需要一个专门的 A/B 测试的管理平台。**


流量复制
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

对于一些涉及核心业务的遗留系统的升级改造，为了确保万无一失，有一种称为影子测试的大招，采用比较复杂的流量复制、回放和比对技术实现

影子测试因为旁路在独立测试环境中进行，可以对生产流量完全无影响, 实施的成本也比较高。适用于一些核心的组件升级。

比如一些开源的方案：

