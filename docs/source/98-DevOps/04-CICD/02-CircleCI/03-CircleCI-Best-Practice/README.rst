.. _circleci-best-practice:

CircleCI Best Practice
==============================================================================

CircleCI 是一个比较年轻的 CICD as service 的平台. 公司创建于 2011 年, 在 2016 年上线了第一个 1.0 版本. 易用程度非常好, 功能非常多, 性能高, 高度可扩展, 并且从软件设计的角度来说设计的非常好.


CircleCI 持续集成能用来做什么?
------------------------------------------------------------------------------

**开源库**:

你的项目是一个开源库. 你想要使用 CI 来测试其的基本功能 和 API 在不同的操作系统, 以及不同的 Runtime 版本 (例如 Python35, 36, 37, 38) 进行单元测试, 又或者兼容依赖库的不同版本.

**Web 应用**:

你的项目是一个 web 应用, 就像 Facebook 或者是 Tweeter, Amazon 的那种.

1. 你想要使用 CI 来测试网站后端的单元功能, 特别是与数据库通信的部分.
2. 单元测试成功后想要将 APP 其部署到测试环境中, 确保部署脚本的代码的运行正常.
3. 部署到测试环境, 使用自动化浏览器测试技术对测试网站进行自动化测试, 确保作为一个 APP 整体, 一切正常.
4. 测试通过, 将其部署到生产环境中.

**虚拟机和容器**:

你的项目是为公司内的其他项目提供虚拟机镜像以及容器镜像, 用于运行服务和应用.

1. 你想要使用 CI 来运行自动化构建的过程, 每构建代码被合并到 Git 主干时, 会自动在沙箱环境中构架虚拟机或容器.
2. 构建完后要自动地对其进行测试, 测试需要的组件是否被成功安装和配置了.
3. 最终将构建好的镜像发布到镜像管理平台上. (例如 AWS AMI Register 或是 DockerHub)


CircleCI 术语概念列表
------------------------------------------------------------------------------

- Jobs: 一个独立的工作, 由一连串 shell script 构成, 每个 jobs 在独立的 container 中运行.
- Orb: 将 Jobs Command 打包到一起的一个功能模块. 比如 安全性检查, 漏洞扫描, VPN 连接. 作为 CICD Workflow 中的可复用模块.
- Layer:
